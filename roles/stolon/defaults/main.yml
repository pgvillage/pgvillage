---
# defaults file for stolon
stolon_release: "v0.17.0b"
stolon_opt_path: "/opt/stolon"
stolon_release_path: "{{ stolon_opt_path }}/{{ stolon_release }}"
stolon_script_path: "{{ getent_passwd[stolon_user][4] }}/bin"
stolon_binary_owner: root
stolon_pkg_arch: amd64
stolon_bin_path: "{{ stolon_release_path }}/stolon-{{ stolon_release }}-linux-{{ stolon_pkg_arch }}/bin"
# If you add items to stolon_packages, the binaries will not be downloaded, but installed from package instead
stolon_package_names: []
#  - "stolon-keeper"
#  - "stolon-proxy"
#  - "stolon-sentinel"
#  - "postgresql{{ stolon_pg_version|replace('.','') }}"
#  - "postgresql{{ stolon_pg_version|replace('.','') }}-server"
#  - "postgresql{{ stolon_pg_version|replace('.','') }}-contrib"
#  - "postgresql{{ stolon_pg_version|replace('.','') }}-devel"
#  - "postgresql{{ stolon_pg_version|replace('.','') }}-plpython3"

stolon_local_package_names: []

# With this we can apply sysctl config as required.
stolon_sysctl: |
  vm.swappiness = 10

stolon_binaries:
  - stolon-keeper
  - stolonctl
  - stolon-proxy
  - stolon-sentinel
stolon_services:
  - keeper
  - proxy
  - sentinel

stolon_pg_version: 12

stolon_pg_listen_address: "{{ ansible_default_ipv4.address }}"
stolon_pg_port: 5432

stolon_user: postgres
stolon_group: "{{ stolon_user }}"

stolon_pg_bin_path: "/usr/pgsql-{{ stolon_pg_version }}/bin/"
stolon_pg_base_dir: "/var/lib/pgsql/{{ stolon_pg_version }}"
stolon_pg_datadir: "{{ stolon_data_dir }}/postgres"
stolon_pg_certdir: "{{ stolon_data_dir }}/certs"

stolon_pg_repl_username: postgres
stolon_pg_repl_auth_method: cert
stolon_pg_repl_connection_type: hostssl

stolon_pg_su_auth_method: cert
stolon_pg_su_connection_type: hostssl


stolon_cluster_name: stolon-cluster
stolon_cluster_hosts: "{{ groups.stolon }}"
stolon_store_backend: etcdv3
stolon_proxy_port: 25432
stolon_data_dir: "/var/lib/pgsql/{{ stolon_pg_version }}/data"
stolon_config_dir: "/var/lib/pgsql/{{ stolon_pg_version }}/config"
stolon_custom_config_file: "{{ stolon_config_dir }}/stolon_custom_config.yml"
stolon_wal_dir: "{{ stolon_pg_datadir }}/pg_wal"
stolon_proxy_listen_address: "{{ ansible_default_ipv4.address }}"
stolon_uid: "{{ inventory_hostname_short | replace('-', '_') }}"

# Used to automatically size min_wal_size
stolon_wal_dir_mp: "/var"

# Used for automatically setting work_mem
# Set to 1 for transactional, and 4-16 for analytical
# Consider the averga amount of operations (merge, sort, group, etc.) per query
stolon_query_complexity: 4

# You can reserve memory not te be used by Postgres
stolon_reserved_memory_mb: 0

stolon_max_connections: 100

# Autoconfig ratios
stolon_shared_buffers_ratio: 0.25
stolon_eff_cache_ratio: 0.75
stolon_min_wal_size_ratio: 0.25
stolon_max_wal_size_ratio: 0.75
stolon_workers_ratio: 4
stolon_parallel_ratio: 4
stolon_gather_ratio: 1

# Autoconfig calculations
stolon_share_buffers_mb: "{{ [ ( stolon_available_memory_mb|int * stolon_shared_buffers_ratio) | int, 8] | max }}"
stolon_effective_cache_size_mb: "{{ [ ( stolon_available_memory_mb|int * stolon_eff_cache_ratio) | int, 1] | max }}"
stolon_min_wal_size_mb: "{{ [ ( facter_mountpoints[stolon_wal_dir_mp]['size_bytes']|int * stolon_min_wal_size_ratio / 1048576) | int, 80] | max }}"
stolon_max_wal_size_mb: "{{ [ ( facter_mountpoints[stolon_wal_dir_mp]['size_bytes']|int * stolon_max_wal_size_ratio / 1048576) | int, 1024] | max }}"
stolon_max_worker_processes: "{{ [ansible_processor_vcpus|int * stolon_workers_ratio|int, 8] | max }}"
stolon_max_parallel_workers: "{{ [ansible_processor_vcpus|int * stolon_parallel_ratio|int, 8] | max }}"
stolon_max_parallel_workers_per_gather: "{{ [ansible_processor_vcpus|int * stolon_gather_ratio|int, 2] | max }}"
stolon_work_mem_kb: "{{ [ (1024 * (stolon_available_memory_mb|int - stolon_share_buffers_mb|int) / stolon_max_connections / stolon_query_complexity) | int, 64] | max }}"

# You can easilly set this to another profile if you want to. Or define your own...
stolon_autoconfig: "{{ stolon_autoconfig_default }}"

stolon_pg_parameters: "{{ stolon_autoconfig | combine(stolon_extra_pg_parameters) | combine(stolon_ssl_pg_parameters) }}"
stolon_extra_pg_parameters:
  log_destination: "csvlog"
  logging_collector: "true"
  log_directory: "{{ stolon_pg_log_directory }}"
  log_file_mode: "0600"
  log_filename: "postgresql-%Y%m%d.log"
  log_rotation_size: "1GB"
  log_line_prefix: "%m [%p]: [%l-1] db=%d,user=%u,app=%a,client=%h"
  log_error_verbosity: "verbose"
  log_statement: "ddl"
  log_min_error_statement: "error"
  log_min_messages: "warning"
  log_min_duration_statement: "5000"
  log_connections: "true"
  log_disconnections: "true"
  log_truncate_on_rotation: "true"

stolon_pg_hba: []

stolon_custom_config:
  defaultSUReplAccessMode: "strict"
  pgParameters: "{{ stolon_pg_parameters }}"
  pgHBA: "{{ stolon_pg_hba }}"
# More info:
# - https://github.com/sorintlab/stolon/blob/master/doc/cluster_spec.md):
# - https://github.com/sorintlab/stolon/blob/master/doc/postgres_parameters.md
# - https://github.com/sorintlab/stolon/blob/master/doc/custom_pg_hba_entries.md

stolon_sysconfig:
  stsentinel:
    cluster_name: "{{ stolon_cluster_name }}"
    store_backend: "{{ stolon_store_backend }}"
  stkeeper:
    cluster_name: "{{ stolon_cluster_name }}"
    store_backend: "{{ stolon_store_backend }}"
    data_dir: "{{ stolon_data_dir }}"
    pgdata_dir: "{{ stolon_pg_datadir }}"
    wal_dir: "{{ stolon_wal_dir }}"
    pgwal_dir: "{{ stolon_wal_dir }}"
    # pg_su_password: "{{ stolon_pg_su_password }}"
    # pg_repl_username: "{{ stolon_pg_repl_username }}"
    # pg_repl_password: "{{ stolon_pg_repl_password }}"
    pg_listen_address: "{{ stolon_pg_listen_address }}"
    pg_port: "{{ stolon_pg_port }}"
    pg_bin_path: "{{ stolon_pg_bin_path }}"
    uid: "{{ stolon_uid }}"
    pg_repl_username: "{{ stolon_pg_repl_username }}"
    pg_repl_auth_method: "{{ stolon_pg_repl_auth_method }}"
    pg_repl_connection_type: "{{ stolon_pg_repl_connection_type }}"
    pg_su_auth_method: "{{ stolon_pg_su_auth_method }}"
    pg_su_connection_type: "{{ stolon_pg_su_connection_type }}"
  stproxy:
    cluster_name: "{{ stolon_cluster_name }}"
    store_backend: "{{ stolon_store_backend }}"
    port: "{{ stolon_proxy_port }}"
    listen-address: "{{ stolon_proxy_listen_address }}"

stolon_pg_log_directory: "{{ stolon_pg_datadir }}/log"
stolon_pg_log_dir_mode: "0755"
stolon_pg_log_retention: 14
stolon_pg_zip_retention: 2

stolon_pg_cron_mailto: "{{ stolon_user }}@{{ inventory_hostname }}"

stolon_pg_jobs:
  - name: Log cleanup
    minute: 20
    hour: 3
    command: "{{ stolon_script_path }}/pg_log_cleanup.sh {{ stolon_pg_log_retention }} {{ stolon_pg_zip_retention }} {{ stolon_pg_log_directory }}"


stolon_cert_folders:
  client:
    path: "{{ getent_passwd[stolon_user][4] }}/.postgresql"
    owner: "{{ stolon_user }}"
  server:
    path: "{{ stolon_pg_certdir }}"
    owner: "{{ stolon_user }}"

stolon_client_cert: "---- CCERT ----"
stolon_client_chain: "---- CCHAIN ----"
stolon_client_key: "---- CKEY ----"
stolon_server_cert: "---- SCERT ----"
stolon_server_key: "---- SKEY ----"
stolon_server_chain: "---- SCHAIN ----"

stolon_cert_files:
  client_cert:
    path: "{{ stolon_cert_folders.client.path }}/postgresql.crt"
    body: "{{ stolon_client_cert }}"
    owner: "{{ stolon_cert_folders.client.owner }}"
  client_key:
    path: "{{ stolon_cert_folders.client.path }}/postgresql.key"
    body: "{{ stolon_client_key }}"
    owner: "{{ stolon_cert_folders.client.owner }}"
  client_chain:
    # The chain of the client should be installed with the server for postgres to verify client certs
    path: "{{ stolon_cert_folders.server.path }}/root.crt"
    body: "{{ stolon_client_chain }}"
    owner: "{{ stolon_cert_folders.server.owner }}"
  server_cert:
    path: "{{ stolon_cert_folders.server.path }}/server.crt"
    body: "{{ stolon_server_cert }}"
    owner: "{{ stolon_cert_folders.server.owner }}"
  server_key:
    path: "{{ stolon_cert_folders.server.path }}/server.key"
    body: "{{ stolon_server_key }}"
    owner: "{{ stolon_cert_folders.server.owner }}"
    # The chain of the server should be installed with the client for libpq to verify the server's cert
  server_chain:
    path: "{{ stolon_cert_folders.client.path }}/root.crt"
    body: "{{ stolon_server_chain }}"
    owner: "{{ stolon_cert_folders.client.owner }}"

stolon_ssl_pg_parameters:
  ssl_cert_file: "{{ stolon_cert_files.server_cert.path }}"
  ssl_key_file: "{{ stolon_cert_files.server_key.path }}"
  ssl_ca_file: "{{ stolon_cert_files.client_chain.path }}"
  ssl: "true"

stolon_keeper_extra_env_vars: {}
#  ORACLE_HOME: /usr/lib/oracle/21/client64
#  LD_LIBRARY_PATH: /usr/lib/oracle/21/client64/lib
#  TNS_ADMIN: /usr/lib/oracle/21/client64/network/admin

stolon_pgusers:
  - pgroute66
  - nrpe
  - pgquartz
